    Notes:
    - You can view the response in console using: $response

# GET


# Define key string
$key = "test10000"

# Construct the URL with the key parameter
$uri = "http://localhost:8090/get?key=$key"

# Send the GET request
$response = Invoke-RestMethod -Uri $uri -Method Get

# Print the response content
$response




# PUT (Expecting Two strings: Key Value)


    $uri = "http://localhost:8090/put" 

    # Define key and value strings
    $key = "test1331223"
    $value = "*value*"

    # Create a PowerShell object with properties
    $jsonObject = @{
        key = $key
        value = $value
    }

    # Convert the PowerShell object to JSON format
    $jsonData = $jsonObject | ConvertTo-Json

    # Send the PUT request
    $response = Invoke-RestMethod -Uri $uri -Method Put -ContentType "application/json" -Body $jsonData

    # Print the response
    $response





# GET MAP

    $uri = "http://localhost:8090/getMap" 
    $response = Invoke-RestMethod -Uri $uri -Method Get
    $response





# UPDATE MAP (Maybe use for testing claimSuccessorKeys?)

    # Define the URL
    $uri = "http://localhost:8090/updateMap"

    # Define the new map data
    $newMap = @{
        "key1356" = "value143"
        "key22323211" = "value23452"
        "key36565" = "value3"
        "key213132123" = "value231"
        "key135423442" = "value223"
        "key3434343" = "value123233"
        "key21423312331" = "value231"
        "key13213122342" = "value223"
        "key33213" = "value123233"

        # Add more key-value pairs as needed
    }

    # Convert the new map to JSON
    $jsonData = $newMap | ConvertTo-Json

    # Send the PUT request
    $response = Invoke-RestMethod -Uri $uri -Method Put -ContentType "application/json" -Body $jsonData

    # Print the response
    $response